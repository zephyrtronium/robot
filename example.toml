# This is an example configuration file for Robot.
# Most options that have string values have environment variables interpolated.
# This example uses that interpolation to integrate with systemd's encrypted
# credentials protocol, by referring to secrets under $CREDENTIALS_DIRECTORY.

# secret is the path to a file containing the secret key used to encrypt
# Robot's durable secrets, such as OAuth2 refresh tokens, as well as to
# generate user hashes for identity obfuscation. The entire content of the file
# is the key. It should be a securely generated random blob.
secret = '$CREDENTIALS_DIRECTORY/key'

[owner]
# name is the name of the owner, used for certain self-description commands.
# It does not need to be a username.
name = 'zephyrtronium'
# contact is a description of how to contact the owner.
contact = '/w zephyrtronium'
# name and contact are used together to respond to commands like "who manages you?"
# in a message that looks like
# "My operator is {name}. {contact} is the best way to contact {name}."

# db is a table of databases used by the bot.
# Exactly one of sqlbrain and kvbrain must be defined.
[db]
# sqlbrain is an SQLite3 connection string for the brain database.
# If sqlbrain is defined, the SQLite3 implementation is used.
sqlbrain = 'file:$ROBOT_SQLITE'
# kvbrain is the directory in which learned knowledge is stored.
# If kvbrain is defined, the Badger implementation is used.
#kvbrain = '$ROBOT_KNOWLEDGE'
# kvflag configures the brain database as a Badger "superflag" string.
# It is ignored when not using the Badger implementation.
#kvflag = ''
# privacy is an SQLite3 connection string for the database where privacy
# information is stored.
privacy = 'file:$ROBOT_SQLITE'
# spoken is an SQLite3 connection string for the database where generated
# message traces are stored.
spoken = 'file:$ROBOT_SQLITE'

# http is the settings for the bot's HTTP API.
[http]
# listen is the address and port on which to listen.
# If omitted, the HTTP API is disabled.
listen = ':4959'

# global includes chat settings that apply to all channels.
[global]
# block is a regex that blocks messages from being learned or copypastad in any channel.
# Unlike most string options, it is not expanded with environment variables.
block = '(?i)bad\s+stuff[^$x]'
# meme is a regex that overrides block for copypasta only.
meme = '^\S*$'

# global.emotes is a table of emotes to use in every channel along with their
# relative weights.
[global.emotes]
'' = 4
';)' = 1

# global.effects is a table of effects to use in every channel along with their
# relative weights.
# The available effects are '', 'OwO', 'AAAAA', and 'o'.
[global.effects]
'' = 18
'OwO' = 1
'AAAAA' = 0
'o' = 1

# global.privileges is a table of privileges across entire services.
# Currently, the only entry in it is twitch.
[global.privileges]
twitch = [
    { name = 'nightbot', level = 'ignore' },
    { name = 'streamelementsbot', level = 'ignore' },
]

[tmi]
# cid is the Twitch app's client ID.
cid = 'hof5gwx0su6owfnys0nyan9c87zr6t'
# secret is the path to a file containing the Twitch app's client secret.
secret = '$CREDENTIALS_DIRECTORY/twitch_client_secret'
# redirect is the OAuth2 redirect URL configured for the application.
# As Robot uses the device code flow for Twitch, the redirect is unused, but
# the value here must match the configuration in the developer portal.
redirect = 'http://localhost'
# token is the file in which to persist the OAuth2 refresh token. If the file
# exists, it should have permissions 0600. It is encrypted with a key derived
# from the key given in the top-level secret.
token = '/var/robot/tmi_refresh'
# owner is the owner user. This user can use special commands for
# administrating the bot.
owner = { id = '51421897', name = 'zephyrtronium' }
# rate is the message rate limit for TMI.
rate = { every = 30, num = 20 }

# Each channel on Twitch is a separate table under the twitch table.
[twitch.bocchi]
# channels is the list of channels using this configuration. It is an array to
# support future integrations.
channels = ['#bocchi']
# learn is the tag applied to learned Markov chain data from this channel.
# If omitted or empty, learning is disabled. A channel with learning disabled
# can still use a send tag to speak.
learn = 'bocchi'
# send is the tag used to select data to generate messages in this channel.
# If omitted or empty, speaking is disabled, except via messages with fixed
# responses. A channel with speaking disabled can still use a learn tag to
# collect data, but actually doing this could be a privacy concern.
# Usually, send should match learn within a channel.
send = 'bocchi'
# block is a regex that blocks messages from being learned in this channel. Any
# message containing text matching this or the global block regex is not used
# for learning. block also prevents a message from contributing to copypasta
# unless the message additionally matches meme, below.
# Unlike most string options, it is not expanded with environment variables.
block = '(?i)cucumber[^$x]'
# responses is the probability of generating a random message when a
# non-command message is received.
responses = 0.02
# rate is the rate limit parameters for interactions in this channel.
rate = { every = 10.1, num = 2 }
# copypasta is the configuration of copypastaing.
copypasta = { need = 2, within = 30 }
# meme overrides block for copypasta only.
meme = '^\S*$'
# Access levels for users.
# Each entry must have a name or ID and a level. If both a name and ID are
# given, the name is ignored.
# The valid levels are 'ignore' to disable learning and use of all commands,
# including prompting; 'selfbot' to disable learning but still allow commmands;
# or 'moderator' to add use of moderation commands.
# Note that on Twitch, the broadcaster and channel moderators always have
# moderator privileges.
# Unlike most strings, these are not expanded with environment variables.
privileges = [
    { name = 'zephyrtronium', level = 'moderator' },
]

[twitch.bocchi.emotes]
'btw make sure to stretch, hydrate, and take care of yourself <3' = 1

[twitch.bocchi.effects]
'AAAAA' = 44444

[discord]
# Discord bot token, requires the Message Content intent enabled.
token = ''
# Server configurations, each server/guild must have a config section here
# this is because we may want to learn from both twitch and discord
# however only use discord messages in discord due to how pings are
# formatted, emotes, etc...
# Other parameters work the same way as the twitch configurations.
configs = [
    { server = "859946655310413844", learn = "bocchi", send = "bocchi", responses = 0.02, rate = { every = 10.1, num = 2 } }
]